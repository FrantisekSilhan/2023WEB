// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ef_pages.Data;

#nullable disable

namespace ef_pages.Migrations
{
    [DbContext(typeof(SchoolDbContext))]
    [Migration("20240220091647_05ChangeClassName")]
    partial class _05ChangeClassName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("ClassSubject", b =>
                {
                    b.Property<int>("Classes2ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Subjects2SubjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Classes2ClassId", "Subjects2SubjectId");

                    b.HasIndex("Subjects2SubjectId");

                    b.ToTable("ClassSubject");
                });

            modelBuilder.Entity("ef_pages.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClassId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            ClassId = 1,
                            ClassName = "P3A"
                        },
                        new
                        {
                            ClassId = 2,
                            ClassName = "P4"
                        });
                });

            modelBuilder.Entity("ef_pages.Models.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("StudentId");

                    b.HasIndex("ClassId");

                    b.ToTable("students");

                    b.HasData(
                        new
                        {
                            StudentId = new Guid("1b2db1ab-dffb-4c69-a96e-49ef3132c847"),
                            ClassId = 1,
                            StudentName = "Franta Vomáčka"
                        },
                        new
                        {
                            StudentId = new Guid("4de0ce36-7fc4-4e67-b12e-173bcf47f262"),
                            ClassId = 1,
                            StudentName = "Alice"
                        },
                        new
                        {
                            StudentId = new Guid("adf2d6e0-e958-416b-9f5f-4722ee4c3954"),
                            ClassId = 2,
                            StudentName = "Bob"
                        });
                });

            modelBuilder.Entity("ef_pages.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SubjectShortName")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("TEXT");

                    b.HasKey("SubjectId");

                    b.ToTable("subjects");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            SubjectName = "Matematika",
                            SubjectShortName = "MAT"
                        },
                        new
                        {
                            SubjectId = 2,
                            SubjectName = "Angličtina",
                            SubjectShortName = "ANJ"
                        },
                        new
                        {
                            SubjectId = 3,
                            SubjectName = "Webové aplikace",
                            SubjectShortName = "WEB"
                        },
                        new
                        {
                            SubjectId = 4,
                            SubjectName = "Programování",
                            SubjectShortName = "PRG"
                        });
                });

            modelBuilder.Entity("ef_pages.Models.SubjectOnClass", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectOnClassId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClassId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("SubjectOnClassId")
                        .IsUnique();

                    b.HasIndex("TeacherId");

                    b.ToTable("subjectOnClasses");
                });

            modelBuilder.Entity("ef_pages.Models.Teacher", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MentorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("TeacherId");

                    b.HasIndex("MentorId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            TeacherId = new Guid("d41a5f46-1d95-44b8-8dc3-bc0d449329a2"),
                            TeacherName = "Ozzy Matikář"
                        },
                        new
                        {
                            TeacherId = new Guid("9a96e698-196c-43f2-894e-f6a9bbd9f874"),
                            TeacherName = "Jan Butanský"
                        },
                        new
                        {
                            TeacherId = new Guid("44f825b4-0b96-414d-84ea-9ecb6f1d16eb"),
                            TeacherName = "Petr Mucha"
                        });
                });

            modelBuilder.Entity("ClassSubject", b =>
                {
                    b.HasOne("ef_pages.Models.Class", null)
                        .WithMany()
                        .HasForeignKey("Classes2ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ef_pages.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("Subjects2SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ef_pages.Models.Student", b =>
                {
                    b.HasOne("ef_pages.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("ef_pages.Models.SubjectOnClass", b =>
                {
                    b.HasOne("ef_pages.Models.Class", "Class")
                        .WithMany("subjectOnClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ef_pages.Models.Subject", "Subject")
                        .WithMany("subjectOnClasses")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ef_pages.Models.Teacher", null)
                        .WithMany("subjectOnClasses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ef_pages.Models.Teacher", b =>
                {
                    b.HasOne("ef_pages.Models.Teacher", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorId");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("ef_pages.Models.Class", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("subjectOnClasses");
                });

            modelBuilder.Entity("ef_pages.Models.Subject", b =>
                {
                    b.Navigation("subjectOnClasses");
                });

            modelBuilder.Entity("ef_pages.Models.Teacher", b =>
                {
                    b.Navigation("subjectOnClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
